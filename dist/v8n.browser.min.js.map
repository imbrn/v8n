{"version":3,"file":"v8n.browser.min.js","sources":["../src/Rule.js","../src/Modifier.js","../src/ValidationError.js","../src/Context.js","../src/v8n.js"],"sourcesContent":["class Rule {\r\n  constructor(name, fn, args, modifiers) {\r\n    this.name = name;\r\n    this.fn = fn;\r\n    this.args = args;\r\n    this.modifiers = modifiers;\r\n  }\r\n\r\n  _test(value) {\r\n    let fn = this.fn;\r\n\r\n    try {\r\n      testAux(this.modifiers.slice(), fn)(value);\r\n    } catch (ex) {\r\n      fn = () => false;\r\n    }\r\n\r\n    try {\r\n      return testAux(this.modifiers.slice(), fn)(value);\r\n    } catch (ex) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  _check(value) {\r\n    try {\r\n      testAux(this.modifiers.slice(), this.fn)(value);\r\n    } catch (ex) {\r\n      if (testAux(this.modifiers.slice(), it => it)(false)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!testAux(this.modifiers.slice(), this.fn)(value)) {\r\n      throw null;\r\n    }\r\n  }\r\n\r\n  _testAsync(value) {\r\n    return new Promise((resolve, reject) => {\r\n      testAsyncAux(\r\n        this.modifiers.slice(),\r\n        this.fn,\r\n      )(value)\r\n        .then(valid => {\r\n          if (valid) {\r\n            resolve(value);\r\n          } else {\r\n            reject(null);\r\n          }\r\n        })\r\n        .catch(ex => reject(ex));\r\n    });\r\n  }\r\n}\r\n\r\nfunction pickFn(fn, variant = 'simple') {\r\n  return typeof fn === 'object' ? fn[variant] : fn;\r\n}\r\n\r\nfunction testAux(modifiers, fn) {\r\n  if (modifiers.length) {\r\n    const modifier = modifiers.shift();\r\n    const nextFn = testAux(modifiers, fn);\r\n    return modifier.perform(nextFn);\r\n  } else {\r\n    return pickFn(fn);\r\n  }\r\n}\r\n\r\nfunction testAsyncAux(modifiers, fn) {\r\n  if (modifiers.length) {\r\n    const modifier = modifiers.shift();\r\n    const nextFn = testAsyncAux(modifiers, fn);\r\n    return modifier.performAsync(nextFn);\r\n  } else {\r\n    return value => Promise.resolve(pickFn(fn, 'async')(value));\r\n  }\r\n}\r\n\r\nexport default Rule;\r\n","class Modifier {\r\n  constructor(name, perform, performAsync) {\r\n    this.name = name;\r\n    this.perform = perform;\r\n    this.performAsync = performAsync;\r\n  }\r\n}\r\n\r\nexport default Modifier;\r\n","class ValidationError extends Error {\r\n  constructor(rule, value, cause, target, ...remaining) {\r\n    super(remaining);\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, ValidationError);\r\n    }\r\n    this.rule = rule;\r\n    this.value = value;\r\n    this.cause = cause;\r\n    this.target = target;\r\n  }\r\n}\r\n\r\nexport default ValidationError;\r\n","import Rule from './Rule';\r\nimport Modifier from './Modifier';\r\nimport ValidationError from './ValidationError';\r\n\r\nclass Context {\r\n  constructor(chain = [], nextRuleModifiers = []) {\r\n    this.chain = chain;\r\n    this.nextRuleModifiers = nextRuleModifiers;\r\n  }\r\n\r\n  _applyRule(ruleFn, name) {\r\n    return (...args) => {\r\n      this.chain.push(\r\n        new Rule(name, ruleFn.apply(this, args), args, this.nextRuleModifiers),\r\n      );\r\n      this.nextRuleModifiers = [];\r\n      return this;\r\n    };\r\n  }\r\n\r\n  _applyModifier(modifier, name) {\r\n    this.nextRuleModifiers.push(\r\n      new Modifier(name, modifier.simple, modifier.async),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  _clone() {\r\n    return new Context(this.chain.slice(), this.nextRuleModifiers.slice());\r\n  }\r\n\r\n  test(value) {\r\n    return this.chain.every(rule => rule._test(value));\r\n  }\r\n\r\n  testAll(value) {\r\n    const err = [];\r\n    this.chain.forEach(rule => {\r\n      try {\r\n        rule._check(value);\r\n      } catch (ex) {\r\n        err.push(new ValidationError(rule, value, ex));\r\n      }\r\n    });\r\n    return err;\r\n  }\r\n\r\n  check(value) {\r\n    this.chain.forEach(rule => {\r\n      try {\r\n        rule._check(value);\r\n      } catch (ex) {\r\n        throw new ValidationError(rule, value, ex);\r\n      }\r\n    });\r\n  }\r\n\r\n  testAsync(value) {\r\n    return new Promise((resolve, reject) => {\r\n      executeAsyncRules(value, this.chain.slice(), resolve, reject);\r\n    });\r\n  }\r\n}\r\n\r\nfunction executeAsyncRules(value, rules, resolve, reject) {\r\n  if (rules.length) {\r\n    const rule = rules.shift();\r\n    rule._testAsync(value).then(\r\n      () => {\r\n        executeAsyncRules(value, rules, resolve, reject);\r\n      },\r\n      cause => {\r\n        reject(new ValidationError(rule, value, cause));\r\n      },\r\n    );\r\n  } else {\r\n    resolve(value);\r\n  }\r\n}\r\n\r\nexport default Context;\r\n","import Context from './Context';\r\n\r\nfunction v8n() {\r\n  return typeof Proxy !== undefined\r\n    ? proxyContext(new Context())\r\n    : proxylessContext(new Context());\r\n}\r\n\r\n// Custom rules\r\nlet customRules = {};\r\n\r\nv8n.extend = function(newRules) {\r\n  Object.assign(customRules, newRules);\r\n};\r\n\r\nv8n.clearCustomRules = function() {\r\n  customRules = {};\r\n};\r\n\r\nfunction proxyContext(context) {\r\n  return new Proxy(context, {\r\n    get(obj, prop) {\r\n      if (prop in obj) {\r\n        return obj[prop];\r\n      }\r\n\r\n      const newContext = proxyContext(context._clone());\r\n\r\n      if (prop in availableModifiers) {\r\n        return newContext._applyModifier(availableModifiers[prop], prop);\r\n      }\r\n      if (prop in customRules) {\r\n        return newContext._applyRule(customRules[prop], prop);\r\n      }\r\n      if (prop in availableRules) {\r\n        return newContext._applyRule(availableRules[prop], prop);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction proxylessContext(context) {\r\n  const addRuleSet = (ruleSet, targetContext) => {\r\n    Object.keys(ruleSet).forEach(prop => {\r\n      targetContext[prop] = (...args) => {\r\n        const newContext = proxylessContext(targetContext._clone());\r\n        const contextWithRuleApplied = newContext._applyRule(\r\n          ruleSet[prop],\r\n          prop,\r\n        )(...args);\r\n        return contextWithRuleApplied;\r\n      };\r\n    });\r\n    return targetContext;\r\n  };\r\n\r\n  const contextWithAvailableRules = addRuleSet(availableRules, context);\r\n  const contextWithAllRules = addRuleSet(\r\n    customRules,\r\n    contextWithAvailableRules,\r\n  );\r\n\r\n  Object.keys(availableModifiers).forEach(prop => {\r\n    Object.defineProperty(contextWithAllRules, prop, {\r\n      get: () => {\r\n        const newContext = proxylessContext(contextWithAllRules._clone());\r\n        return newContext._applyModifier(availableModifiers[prop], prop);\r\n      },\r\n    });\r\n  });\r\n\r\n  return contextWithAllRules;\r\n}\r\n\r\nconst availableModifiers = {\r\n  not: {\r\n    simple: fn => value => !fn(value),\r\n    async: fn => value =>\r\n      Promise.resolve(fn(value))\r\n        .then(result => !result)\r\n        .catch(() => true),\r\n  },\r\n\r\n  some: {\r\n    simple: fn => value => {\r\n      return split(value).some(item => {\r\n        try {\r\n          return fn(item);\r\n        } catch (ex) {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    async: fn => value => {\r\n      return Promise.all(\r\n        split(value).map(item => {\r\n          try {\r\n            return fn(item).catch(() => false);\r\n          } catch (ex) {\r\n            return false;\r\n          }\r\n        }),\r\n      ).then(result => result.some(Boolean));\r\n    },\r\n  },\r\n\r\n  every: {\r\n    simple: fn => value => value !== false && split(value).every(fn),\r\n    async: fn => value =>\r\n      Promise.all(split(value).map(fn)).then(result => result.every(Boolean)),\r\n  },\r\n};\r\n\r\nfunction split(value) {\r\n  if (typeof value === 'string') {\r\n    return value.split('');\r\n  }\r\n  return value;\r\n}\r\n\r\nconst availableRules = {\r\n  // Value\r\n\r\n  equal: expected => value => value == expected,\r\n\r\n  exact: expected => value => value === expected,\r\n\r\n  // Types\r\n\r\n  number: (allowInfinite = true) => value =>\r\n    typeof value === 'number' && (allowInfinite || isFinite(value)),\r\n\r\n  integer: () => value => {\r\n    const isInteger = Number.isInteger || isIntegerPolyfill;\r\n    return isInteger(value);\r\n  },\r\n\r\n  numeric: () => value => !isNaN(parseFloat(value)) && isFinite(value),\r\n\r\n  string: () => testType('string'),\r\n\r\n  boolean: () => testType('boolean'),\r\n\r\n  undefined: () => testType('undefined'),\r\n\r\n  null: () => testType('null'),\r\n\r\n  array: () => testType('array'),\r\n\r\n  object: () => testType('object'),\r\n\r\n  instanceOf: instance => value => value instanceof instance,\r\n\r\n  // Pattern\r\n\r\n  pattern: expected => value => expected.test(value),\r\n\r\n  lowercase: () => value => /^([a-z]+\\s*)+$/.test(value),\r\n\r\n  uppercase: () => value => /^([A-Z]+\\s*)+$/.test(value),\r\n\r\n  vowel: () => value => /^[aeiou]+$/i.test(value),\r\n\r\n  consonant: () => value => /^(?=[^aeiou])([a-z]+)$/i.test(value),\r\n\r\n  // Value at\r\n\r\n  first: expected => value => value[0] == expected,\r\n\r\n  last: expected => value => value[value.length - 1] == expected,\r\n\r\n  // Length\r\n\r\n  empty: () => value => value.length === 0,\r\n\r\n  length: (min, max) => value =>\r\n    value.length >= min && value.length <= (max || min),\r\n\r\n  minLength: min => value => value.length >= min,\r\n\r\n  maxLength: max => value => value.length <= max,\r\n\r\n  // Range\r\n\r\n  negative: () => value => value < 0,\r\n\r\n  positive: () => value => value >= 0,\r\n\r\n  between: (a, b) => value => value >= a && value <= b,\r\n\r\n  range: (a, b) => value => value >= a && value <= b,\r\n\r\n  lessThan: n => value => value < n,\r\n\r\n  lessThanOrEqual: n => value => value <= n,\r\n\r\n  greaterThan: n => value => value > n,\r\n\r\n  greaterThanOrEqual: n => value => value >= n,\r\n\r\n  // Divisible\r\n\r\n  even: () => value => value % 2 === 0,\r\n\r\n  odd: () => value => value % 2 !== 0,\r\n\r\n  includes: expected => value => ~value.indexOf(expected),\r\n\r\n  schema: schema => testSchema(schema),\r\n\r\n  // branching\r\n\r\n  passesAnyOf: (...validations) => value =>\r\n    validations.some(validation => validation.test(value)),\r\n\r\n  optional: createOptionalRule(false),\r\n  optionalAsync: createOptionalRule(true),\r\n};\r\n\r\nfunction createOptionalRule(asynchronous) {\r\n  return (validation, considerTrimmedEmptyString = false) => value => {\r\n    if (\r\n      considerTrimmedEmptyString &&\r\n      typeof value === 'string' &&\r\n      value.trim() === ''\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (value !== undefined && value !== null) {\r\n      if (!asynchronous) {\r\n        validation.check(value);\r\n      } else {\r\n        return validation.testAsync(value);\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction testType(expected) {\r\n  return value => {\r\n    return (\r\n      (Array.isArray(value) && expected === 'array') ||\r\n      (value === null && expected === 'null') ||\r\n      typeof value === expected\r\n    );\r\n  };\r\n}\r\n\r\nfunction isIntegerPolyfill(value) {\r\n  return (\r\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\r\n  );\r\n}\r\n\r\nfunction testSchema(schema) {\r\n  return {\r\n    simple: value => {\r\n      const causes = [];\r\n      Object.keys(schema).forEach(key => {\r\n        const nestedValidation = schema[key];\r\n        try {\r\n          nestedValidation.check((value || {})[key]);\r\n        } catch (ex) {\r\n          ex.target = key;\r\n          causes.push(ex);\r\n        }\r\n      });\r\n      if (causes.length > 0) {\r\n        throw causes;\r\n      }\r\n      return true;\r\n    },\r\n    async: value => {\r\n      const causes = [];\r\n      const nested = Object.keys(schema).map(key => {\r\n        const nestedValidation = schema[key];\r\n        return nestedValidation.testAsync((value || {})[key]).catch(ex => {\r\n          ex.target = key;\r\n          causes.push(ex);\r\n        });\r\n      });\r\n      return Promise.all(nested).then(() => {\r\n        if (causes.length > 0) {\r\n          throw causes;\r\n        }\r\n\r\n        return true;\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nexport default v8n;\r\n"],"names":["Rule","name","fn","args","modifiers","this","pickFn","variant","testAux","length","const","modifier","shift","nextFn","perform","testAsyncAux","performAsync","value","Promise","resolve","_test","let","slice","ex","_check","it","_testAsync","reject","then","valid","catch","Modifier","ValidationError","rule","cause","target","super","remaining","Error","captureStackTrace","Context","chain","nextRuleModifiers","executeAsyncRules","rules","v8n","undefined","Proxy","proxyContext","proxylessContext","_applyRule","ruleFn","push","apply","_applyModifier","simple","async","_clone","test","every","testAll","err","forEach","check","testAsync","customRules","context","get","obj","prop","newContext","availableModifiers","availableRules","addRuleSet","ruleSet","targetContext","Object","keys","contextWithRuleApplied","contextWithAvailableRules","contextWithAllRules","defineProperty","extend","newRules","assign","clearCustomRules","not","result","some","split","item","all","map","Boolean","equal","expected","exact","number","allowInfinite","isFinite","integer","Number","isInteger","isIntegerPolyfill","numeric","isNaN","parseFloat","string","testType","boolean","null","array","object","instanceOf","instance","pattern","lowercase","uppercase","vowel","consonant","first","last","empty","min","max","minLength","maxLength","negative","positive","between","a","b","range","lessThan","n","lessThanOrEqual","greaterThan","greaterThanOrEqual","even","odd","includes","indexOf","schema","causes","key","nestedValidation","nested","testSchema","passesAnyOf","validations","validation","optional","createOptionalRule","optionalAsync","asynchronous","considerTrimmedEmptyString","trim","Array","isArray","Math","floor"],"mappings":"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"}