{"version":3,"file":"v8n.esm.browser.min.js","sources":["../src/Rule.js","../src/Modifier.js","../src/ValidationError.js","../src/Context.js","../src/v8n.js"],"sourcesContent":["class Rule {\r\n  constructor(name, fn, args, modifiers) {\r\n    this.name = name;\r\n    this.fn = fn;\r\n    this.args = args;\r\n    this.modifiers = modifiers;\r\n  }\r\n\r\n  _test(value) {\r\n    let fn = this.fn;\r\n\r\n    try {\r\n      testAux(this.modifiers.slice(), fn)(value);\r\n    } catch (ex) {\r\n      fn = () => false;\r\n    }\r\n\r\n    try {\r\n      return testAux(this.modifiers.slice(), fn)(value);\r\n    } catch (ex) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  _check(value) {\r\n    try {\r\n      testAux(this.modifiers.slice(), this.fn)(value);\r\n    } catch (ex) {\r\n      if (testAux(this.modifiers.slice(), it => it)(false)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!testAux(this.modifiers.slice(), this.fn)(value)) {\r\n      throw null;\r\n    }\r\n  }\r\n\r\n  _testAsync(value) {\r\n    return new Promise((resolve, reject) => {\r\n      testAsyncAux(\r\n        this.modifiers.slice(),\r\n        this.fn,\r\n      )(value)\r\n        .then(valid => {\r\n          if (valid) {\r\n            resolve(value);\r\n          } else {\r\n            reject(null);\r\n          }\r\n        })\r\n        .catch(ex => reject(ex));\r\n    });\r\n  }\r\n}\r\n\r\nfunction pickFn(fn, variant = 'simple') {\r\n  return typeof fn === 'object' ? fn[variant] : fn;\r\n}\r\n\r\nfunction testAux(modifiers, fn) {\r\n  if (modifiers.length) {\r\n    const modifier = modifiers.shift();\r\n    const nextFn = testAux(modifiers, fn);\r\n    return modifier.perform(nextFn);\r\n  } else {\r\n    return pickFn(fn);\r\n  }\r\n}\r\n\r\nfunction testAsyncAux(modifiers, fn) {\r\n  if (modifiers.length) {\r\n    const modifier = modifiers.shift();\r\n    const nextFn = testAsyncAux(modifiers, fn);\r\n    return modifier.performAsync(nextFn);\r\n  } else {\r\n    return value => Promise.resolve(pickFn(fn, 'async')(value));\r\n  }\r\n}\r\n\r\nexport default Rule;\r\n","class Modifier {\r\n  constructor(name, perform, performAsync) {\r\n    this.name = name;\r\n    this.perform = perform;\r\n    this.performAsync = performAsync;\r\n  }\r\n}\r\n\r\nexport default Modifier;\r\n","class ValidationError extends Error {\r\n  constructor(rule, value, cause, target, ...remaining) {\r\n    super(remaining);\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, ValidationError);\r\n    }\r\n    this.rule = rule;\r\n    this.value = value;\r\n    this.cause = cause;\r\n    this.target = target;\r\n  }\r\n}\r\n\r\nexport default ValidationError;\r\n","import Rule from './Rule';\r\nimport Modifier from './Modifier';\r\nimport ValidationError from './ValidationError';\r\n\r\nclass Context {\r\n  constructor(chain = [], nextRuleModifiers = []) {\r\n    this.chain = chain;\r\n    this.nextRuleModifiers = nextRuleModifiers;\r\n  }\r\n\r\n  _applyRule(ruleFn, name) {\r\n    return (...args) => {\r\n      this.chain.push(\r\n        new Rule(name, ruleFn.apply(this, args), args, this.nextRuleModifiers),\r\n      );\r\n      this.nextRuleModifiers = [];\r\n      return this;\r\n    };\r\n  }\r\n\r\n  _applyModifier(modifier, name) {\r\n    this.nextRuleModifiers.push(\r\n      new Modifier(name, modifier.simple, modifier.async),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  _clone() {\r\n    return new Context(this.chain.slice(), this.nextRuleModifiers.slice());\r\n  }\r\n\r\n  test(value) {\r\n    return this.chain.every(rule => rule._test(value));\r\n  }\r\n\r\n  testAll(value) {\r\n    const err = [];\r\n    this.chain.forEach(rule => {\r\n      try {\r\n        rule._check(value);\r\n      } catch (ex) {\r\n        err.push(new ValidationError(rule, value, ex));\r\n      }\r\n    });\r\n    return err;\r\n  }\r\n\r\n  check(value) {\r\n    this.chain.forEach(rule => {\r\n      try {\r\n        rule._check(value);\r\n      } catch (ex) {\r\n        throw new ValidationError(rule, value, ex);\r\n      }\r\n    });\r\n  }\r\n\r\n  testAsync(value) {\r\n    return new Promise((resolve, reject) => {\r\n      executeAsyncRules(value, this.chain.slice(), resolve, reject);\r\n    });\r\n  }\r\n}\r\n\r\nfunction executeAsyncRules(value, rules, resolve, reject) {\r\n  if (rules.length) {\r\n    const rule = rules.shift();\r\n    rule._testAsync(value).then(\r\n      () => {\r\n        executeAsyncRules(value, rules, resolve, reject);\r\n      },\r\n      cause => {\r\n        reject(new ValidationError(rule, value, cause));\r\n      },\r\n    );\r\n  } else {\r\n    resolve(value);\r\n  }\r\n}\r\n\r\nexport default Context;\r\n","import Context from './Context';\r\n\r\nfunction v8n() {\r\n  return typeof Proxy !== undefined\r\n    ? proxyContext(new Context())\r\n    : proxylessContext(new Context());\r\n}\r\n\r\n// Custom rules\r\nlet customRules = {};\r\n\r\nv8n.extend = function(newRules) {\r\n  Object.assign(customRules, newRules);\r\n};\r\n\r\nv8n.clearCustomRules = function() {\r\n  customRules = {};\r\n};\r\n\r\nfunction proxyContext(context) {\r\n  return new Proxy(context, {\r\n    get(obj, prop) {\r\n      if (prop in obj) {\r\n        return obj[prop];\r\n      }\r\n\r\n      const newContext = proxyContext(context._clone());\r\n\r\n      if (prop in availableModifiers) {\r\n        return newContext._applyModifier(availableModifiers[prop], prop);\r\n      }\r\n      if (prop in customRules) {\r\n        return newContext._applyRule(customRules[prop], prop);\r\n      }\r\n      if (prop in availableRules) {\r\n        return newContext._applyRule(availableRules[prop], prop);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nfunction proxylessContext(context) {\r\n  const addRuleSet = (ruleSet, targetContext) => {\r\n    Object.keys(ruleSet).forEach(prop => {\r\n      targetContext[prop] = (...args) => {\r\n        const newContext = proxylessContext(targetContext._clone());\r\n        const contextWithRuleApplied = newContext._applyRule(\r\n          ruleSet[prop],\r\n          prop,\r\n        )(...args);\r\n        return contextWithRuleApplied;\r\n      };\r\n    });\r\n    return targetContext;\r\n  };\r\n\r\n  const contextWithAvailableRules = addRuleSet(availableRules, context);\r\n  const contextWithAllRules = addRuleSet(\r\n    customRules,\r\n    contextWithAvailableRules,\r\n  );\r\n\r\n  Object.keys(availableModifiers).forEach(prop => {\r\n    Object.defineProperty(contextWithAllRules, prop, {\r\n      get: () => {\r\n        const newContext = proxylessContext(contextWithAllRules._clone());\r\n        return newContext._applyModifier(availableModifiers[prop], prop);\r\n      },\r\n    });\r\n  });\r\n\r\n  return contextWithAllRules;\r\n}\r\n\r\nconst availableModifiers = {\r\n  not: {\r\n    simple: fn => value => !fn(value),\r\n    async: fn => value =>\r\n      Promise.resolve(fn(value))\r\n        .then(result => !result)\r\n        .catch(() => true),\r\n  },\r\n\r\n  some: {\r\n    simple: fn => value => {\r\n      return split(value).some(item => {\r\n        try {\r\n          return fn(item);\r\n        } catch (ex) {\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n    async: fn => value => {\r\n      return Promise.all(\r\n        split(value).map(item => {\r\n          try {\r\n            return fn(item).catch(() => false);\r\n          } catch (ex) {\r\n            return false;\r\n          }\r\n        }),\r\n      ).then(result => result.some(Boolean));\r\n    },\r\n  },\r\n\r\n  every: {\r\n    simple: fn => value => value !== false && split(value).every(fn),\r\n    async: fn => value =>\r\n      Promise.all(split(value).map(fn)).then(result => result.every(Boolean)),\r\n  },\r\n};\r\n\r\nfunction split(value) {\r\n  if (typeof value === 'string') {\r\n    return value.split('');\r\n  }\r\n  return value;\r\n}\r\n\r\nconst availableRules = {\r\n  // Value\r\n\r\n  equal: expected => value => value == expected,\r\n\r\n  exact: expected => value => value === expected,\r\n\r\n  // Types\r\n\r\n  number: (allowInfinite = true) => value =>\r\n    typeof value === 'number' && (allowInfinite || isFinite(value)),\r\n\r\n  integer: () => value => {\r\n    const isInteger = Number.isInteger || isIntegerPolyfill;\r\n    return isInteger(value);\r\n  },\r\n\r\n  numeric: () => value => !isNaN(parseFloat(value)) && isFinite(value),\r\n\r\n  string: () => testType('string'),\r\n\r\n  boolean: () => testType('boolean'),\r\n\r\n  undefined: () => testType('undefined'),\r\n\r\n  null: () => testType('null'),\r\n\r\n  array: () => testType('array'),\r\n\r\n  object: () => testType('object'),\r\n\r\n  instanceOf: instance => value => value instanceof instance,\r\n\r\n  // Pattern\r\n\r\n  pattern: expected => value => expected.test(value),\r\n\r\n  lowercase: () => value => /^([a-z]+\\s*)+$/.test(value),\r\n\r\n  uppercase: () => value => /^([A-Z]+\\s*)+$/.test(value),\r\n\r\n  vowel: () => value => /^[aeiou]+$/i.test(value),\r\n\r\n  consonant: () => value => /^(?=[^aeiou])([a-z]+)$/i.test(value),\r\n\r\n  // Value at\r\n\r\n  first: expected => value => value[0] == expected,\r\n\r\n  last: expected => value => value[value.length - 1] == expected,\r\n\r\n  // Length\r\n\r\n  empty: () => value => value.length === 0,\r\n\r\n  length: (min, max) => value =>\r\n    value.length >= min && value.length <= (max || min),\r\n\r\n  minLength: min => value => value.length >= min,\r\n\r\n  maxLength: max => value => value.length <= max,\r\n\r\n  // Range\r\n\r\n  negative: () => value => value < 0,\r\n\r\n  positive: () => value => value >= 0,\r\n\r\n  between: (a, b) => value => value >= a && value <= b,\r\n\r\n  range: (a, b) => value => value >= a && value <= b,\r\n\r\n  lessThan: n => value => value < n,\r\n\r\n  lessThanOrEqual: n => value => value <= n,\r\n\r\n  greaterThan: n => value => value > n,\r\n\r\n  greaterThanOrEqual: n => value => value >= n,\r\n\r\n  // Divisible\r\n\r\n  even: () => value => value % 2 === 0,\r\n\r\n  odd: () => value => value % 2 !== 0,\r\n\r\n  includes: expected => value => ~value.indexOf(expected),\r\n\r\n  schema: schema => testSchema(schema),\r\n\r\n  // branching\r\n\r\n  passesAnyOf: (...validations) => value =>\r\n    validations.some(validation => validation.test(value)),\r\n\r\n  optional: createOptionalRule(false),\r\n  optionalAsync: createOptionalRule(true),\r\n};\r\n\r\nfunction createOptionalRule(asynchronous) {\r\n  return (validation, considerTrimmedEmptyString = false) => value => {\r\n    if (\r\n      considerTrimmedEmptyString &&\r\n      typeof value === 'string' &&\r\n      value.trim() === ''\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    if (value !== undefined && value !== null) {\r\n      if (!asynchronous) {\r\n        validation.check(value);\r\n      } else {\r\n        return validation.testAsync(value);\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction testType(expected) {\r\n  return value => {\r\n    return (\r\n      (Array.isArray(value) && expected === 'array') ||\r\n      (value === null && expected === 'null') ||\r\n      typeof value === expected\r\n    );\r\n  };\r\n}\r\n\r\nfunction isIntegerPolyfill(value) {\r\n  return (\r\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\r\n  );\r\n}\r\n\r\nfunction testSchema(schema) {\r\n  return {\r\n    simple: value => {\r\n      const causes = [];\r\n      Object.keys(schema).forEach(key => {\r\n        const nestedValidation = schema[key];\r\n        try {\r\n          nestedValidation.check((value || {})[key]);\r\n        } catch (ex) {\r\n          ex.target = key;\r\n          causes.push(ex);\r\n        }\r\n      });\r\n      if (causes.length > 0) {\r\n        throw causes;\r\n      }\r\n      return true;\r\n    },\r\n    async: value => {\r\n      const causes = [];\r\n      const nested = Object.keys(schema).map(key => {\r\n        const nestedValidation = schema[key];\r\n        return nestedValidation.testAsync((value || {})[key]).catch(ex => {\r\n          ex.target = key;\r\n          causes.push(ex);\r\n        });\r\n      });\r\n      return Promise.all(nested).then(() => {\r\n        if (causes.length > 0) {\r\n          throw causes;\r\n        }\r\n\r\n        return true;\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nexport default v8n;\r\n"],"names":["Rule","[object Object]","name","fn","args","modifiers","this","value","testAux","slice","ex","it","Promise","resolve","reject","testAsyncAux","then","valid","catch","pickFn","variant","length","modifier","shift","nextFn","perform","performAsync","Modifier","ValidationError","Error","rule","cause","target","remaining","super","captureStackTrace","Context","chain","nextRuleModifiers","ruleFn","push","apply","simple","async","every","_test","err","forEach","_check","executeAsyncRules","rules","_testAsync","v8n","undefined","Proxy","proxyContext","proxylessContext","customRules","context","obj","prop","newContext","_clone","availableModifiers","_applyModifier","_applyRule","availableRules","addRuleSet","ruleSet","targetContext","Object","keys","contextWithAvailableRules","contextWithAllRules","defineProperty","get","extend","newRules","assign","clearCustomRules","not","result","some","split","item","all","map","Boolean","equal","expected","exact","number","allowInfinite","isFinite","integer","Number","isInteger","isIntegerPolyfill","numeric","isNaN","parseFloat","string","testType","boolean","null","array","object","instanceOf","instance","pattern","test","lowercase","uppercase","vowel","consonant","first","last","empty","min","max","minLength","maxLength","negative","positive","between","a","b","range","lessThan","n","lessThanOrEqual","greaterThan","greaterThanOrEqual","even","odd","includes","indexOf","schema","causes","key","nestedValidation","check","nested","testAsync","testSchema","passesAnyOf","validations","validation","optional","createOptionalRule","optionalAsync","asynchronous","considerTrimmedEmptyString","trim","Array","isArray","Math","floor"],"mappings":"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"}