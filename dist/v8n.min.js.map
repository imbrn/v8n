{"version":3,"file":"v8n.min.js","sources":["../src/Rule.js","../src/Modifier.js","../src/ValidationError.js","../src/Context.js","../src/rules/optional.js","../src/v8n.js"],"sourcesContent":["class Rule {\n  constructor(name, fn, args, modifiers) {\n    this.name = name;\n    this.fn = fn;\n    this.args = args;\n    this.modifiers = modifiers;\n  }\n\n  _test(value) {\n    let fn = this.fn;\n\n    try {\n      testAux(this.modifiers.slice(), fn)(value);\n    } catch (ex) {\n      fn = () => false;\n    }\n\n    try {\n      return testAux(this.modifiers.slice(), fn)(value);\n    } catch (ex) {\n      return false;\n    }\n  }\n\n  _check(value) {\n    try {\n      testAux(this.modifiers.slice(), this.fn)(value);\n    } catch (ex) {\n      if (testAux(this.modifiers.slice(), it => it)(false)) {\n        return;\n      }\n    }\n\n    if (!testAux(this.modifiers.slice(), this.fn)(value)) {\n      throw null;\n    }\n  }\n\n  _testAsync(value) {\n    return new Promise((resolve, reject) => {\n      testAsyncAux(\n        this.modifiers.slice(),\n        this.fn,\n      )(value)\n        .then(valid => {\n          if (valid) {\n            resolve(value);\n          } else {\n            reject(null);\n          }\n        })\n        .catch(ex => reject(ex));\n    });\n  }\n}\n\nfunction pickFn(fn, variant = 'simple') {\n  return typeof fn === 'object' ? fn[variant] : fn;\n}\n\nfunction testAux(modifiers, fn) {\n  if (modifiers.length) {\n    const modifier = modifiers.shift();\n    const nextFn = testAux(modifiers, fn);\n    return modifier.perform(nextFn);\n  } else {\n    return pickFn(fn);\n  }\n}\n\nfunction testAsyncAux(modifiers, fn) {\n  if (modifiers.length) {\n    const modifier = modifiers.shift();\n    const nextFn = testAsyncAux(modifiers, fn);\n    return modifier.performAsync(nextFn);\n  } else {\n    return value => Promise.resolve(pickFn(fn, 'async')(value));\n  }\n}\n\nexport default Rule;\n","class Modifier {\n  constructor(name, perform, performAsync) {\n    this.name = name;\n    this.perform = perform;\n    this.performAsync = performAsync;\n  }\n}\n\nexport default Modifier;\n","class ValidationError extends Error {\n  constructor(rule, value, cause, target, ...remaining) {\n    super(remaining);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ValidationError);\n    }\n    this.rule = rule;\n    this.value = value;\n    this.cause = cause;\n    this.target = target;\n  }\n}\n\nexport default ValidationError;\n","import Rule from './Rule';\nimport Modifier from './Modifier';\nimport ValidationError from './ValidationError';\n\nclass Context {\n  constructor(chain = [], nextRuleModifiers = []) {\n    this.chain = chain;\n    this.nextRuleModifiers = nextRuleModifiers;\n  }\n\n  _applyRule(ruleFn, name) {\n    return (...args) => {\n      this.chain.push(\n        new Rule(name, ruleFn.apply(this, args), args, this.nextRuleModifiers),\n      );\n      this.nextRuleModifiers = [];\n      return this;\n    };\n  }\n\n  _applyModifier(modifier, name) {\n    this.nextRuleModifiers.push(\n      new Modifier(name, modifier.simple, modifier.async),\n    );\n    return this;\n  }\n\n  _clone() {\n    return new Context(this.chain.slice(), this.nextRuleModifiers.slice());\n  }\n\n  test(value) {\n    return this.chain.every(rule => rule._test(value));\n  }\n\n  testAll(value) {\n    const err = [];\n    this.chain.forEach(rule => {\n      try {\n        rule._check(value);\n      } catch (ex) {\n        err.push(new ValidationError(rule, value, ex));\n      }\n    });\n    return err;\n  }\n\n  check(value) {\n    this.chain.forEach(rule => {\n      try {\n        rule._check(value);\n      } catch (ex) {\n        throw new ValidationError(rule, value, ex);\n      }\n    });\n  }\n\n  testAsync(value) {\n    return new Promise((resolve, reject) => {\n      executeAsyncRules(value, this.chain.slice(), resolve, reject);\n    });\n  }\n}\n\nfunction executeAsyncRules(value, rules, resolve, reject) {\n  if (rules.length) {\n    const rule = rules.shift();\n    rule._testAsync(value).then(\n      () => {\n        executeAsyncRules(value, rules, resolve, reject);\n      },\n      cause => {\n        reject(new ValidationError(rule, value, cause));\n      },\n    );\n  } else {\n    resolve(value);\n  }\n}\n\nexport default Context;\n","const consideredEmpty = (value, considerTrimmedEmptyString) => {\n  if (\n    considerTrimmedEmptyString &&\n    typeof value === 'string' &&\n    value.trim().length === 0\n  ) {\n    return true;\n  }\n\n  return value === undefined || value === null;\n};\n\nexport default (validation, considerTrimmedEmptyString = false) => ({\n  simple: value =>\n    consideredEmpty(value, considerTrimmedEmptyString) ||\n    validation.check(value) === undefined,\n  async: value =>\n    consideredEmpty(value, considerTrimmedEmptyString) ||\n    validation.testAsync(value),\n});\n","import Context from './Context';\nimport optional from './rules/optional';\n\nfunction v8n() {\n  return typeof Proxy !== undefined\n    ? proxyContext(new Context())\n    : proxylessContext(new Context());\n}\n\n// Custom rules\nlet customRules = {};\n\nv8n.extend = function(newRules) {\n  Object.assign(customRules, newRules);\n};\n\nv8n.clearCustomRules = function() {\n  customRules = {};\n};\n\nfunction proxyContext(context) {\n  return new Proxy(context, {\n    get(obj, prop) {\n      if (prop in obj) {\n        return obj[prop];\n      }\n\n      const newContext = proxyContext(context._clone());\n\n      if (prop in availableModifiers) {\n        return newContext._applyModifier(availableModifiers[prop], prop);\n      }\n      if (prop in customRules) {\n        return newContext._applyRule(customRules[prop], prop);\n      }\n      if (prop in availableRules) {\n        return newContext._applyRule(availableRules[prop], prop);\n      }\n    },\n  });\n}\n\nfunction proxylessContext(context) {\n  const addRuleSet = (ruleSet, targetContext) => {\n    Object.keys(ruleSet).forEach(prop => {\n      targetContext[prop] = (...args) => {\n        const newContext = proxylessContext(targetContext._clone());\n        const contextWithRuleApplied = newContext._applyRule(\n          ruleSet[prop],\n          prop,\n        )(...args);\n        return contextWithRuleApplied;\n      };\n    });\n    return targetContext;\n  };\n\n  const contextWithAvailableRules = addRuleSet(availableRules, context);\n  const contextWithAllRules = addRuleSet(\n    customRules,\n    contextWithAvailableRules,\n  );\n\n  Object.keys(availableModifiers).forEach(prop => {\n    Object.defineProperty(contextWithAllRules, prop, {\n      get: () => {\n        const newContext = proxylessContext(contextWithAllRules._clone());\n        return newContext._applyModifier(availableModifiers[prop], prop);\n      },\n    });\n  });\n\n  return contextWithAllRules;\n}\n\nconst availableModifiers = {\n  not: {\n    simple: fn => value => !fn(value),\n    async: fn => value =>\n      Promise.resolve(fn(value))\n        .then(result => !result)\n        .catch(() => true),\n  },\n\n  some: {\n    simple: fn => value => {\n      return split(value).some(item => {\n        try {\n          return fn(item);\n        } catch (ex) {\n          return false;\n        }\n      });\n    },\n    async: fn => value => {\n      return Promise.all(\n        split(value).map(item => {\n          try {\n            return fn(item).catch(() => false);\n          } catch (ex) {\n            return false;\n          }\n        }),\n      ).then(result => result.some(Boolean));\n    },\n  },\n\n  every: {\n    simple: fn => value => value !== false && split(value).every(fn),\n    async: fn => value =>\n      Promise.all(split(value).map(fn)).then(result => result.every(Boolean)),\n  },\n};\n\nfunction split(value) {\n  if (typeof value === 'string') {\n    return value.split('');\n  }\n  return value;\n}\n\nconst availableRules = {\n  // Value\n\n  equal: expected => value => value == expected,\n\n  exact: expected => value => value === expected,\n\n  // Types\n\n  number: (allowInfinite = true) => value =>\n    typeof value === 'number' && (allowInfinite || isFinite(value)),\n\n  integer: () => value => {\n    const isInteger = Number.isInteger || isIntegerPolyfill;\n    return isInteger(value);\n  },\n\n  numeric: () => value => !isNaN(parseFloat(value)) && isFinite(value),\n\n  string: () => testType('string'),\n\n  boolean: () => testType('boolean'),\n\n  undefined: () => testType('undefined'),\n\n  null: () => testType('null'),\n\n  array: () => testType('array'),\n\n  object: () => testType('object'),\n\n  instanceOf: instance => value => value instanceof instance,\n\n  // Pattern\n\n  pattern: expected => value => expected.test(value),\n\n  lowercase: () => value => /^([a-z]+\\s*)+$/.test(value),\n\n  uppercase: () => value => /^([A-Z]+\\s*)+$/.test(value),\n\n  vowel: () => value => /^[aeiou]+$/i.test(value),\n\n  consonant: () => value => /^(?=[^aeiou])([a-z]+)$/i.test(value),\n\n  // Value at\n\n  first: expected => value => value[0] == expected,\n\n  last: expected => value => value[value.length - 1] == expected,\n\n  // Length\n\n  empty: () => value => value.length === 0,\n\n  length: (min, max) => value =>\n    value.length >= min && value.length <= (max || min),\n\n  minLength: min => value => value.length >= min,\n\n  maxLength: max => value => value.length <= max,\n\n  // Range\n\n  negative: () => value => value < 0,\n\n  positive: () => value => value >= 0,\n\n  between: (a, b) => value => value >= a && value <= b,\n\n  range: (a, b) => value => value >= a && value <= b,\n\n  lessThan: n => value => value < n,\n\n  lessThanOrEqual: n => value => value <= n,\n\n  greaterThan: n => value => value > n,\n\n  greaterThanOrEqual: n => value => value >= n,\n\n  // Divisible\n\n  even: () => value => value % 2 === 0,\n\n  odd: () => value => value % 2 !== 0,\n\n  includes: expected => value => ~value.indexOf(expected),\n\n  schema: schema => testSchema(schema),\n\n  // branching\n\n  passesAnyOf: (...validations) => value =>\n    validations.some(validation => validation.test(value)),\n\n  optional,\n};\n\nfunction testType(expected) {\n  return value => {\n    return (\n      (Array.isArray(value) && expected === 'array') ||\n      (value === null && expected === 'null') ||\n      typeof value === expected\n    );\n  };\n}\n\nfunction isIntegerPolyfill(value) {\n  return (\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n  );\n}\n\nfunction testSchema(schema) {\n  return {\n    simple: value => {\n      const causes = [];\n      Object.keys(schema).forEach(key => {\n        const nestedValidation = schema[key];\n        try {\n          nestedValidation.check((value || {})[key]);\n        } catch (ex) {\n          ex.target = key;\n          causes.push(ex);\n        }\n      });\n      if (causes.length > 0) {\n        throw causes;\n      }\n      return true;\n    },\n    async: value => {\n      const causes = [];\n      const nested = Object.keys(schema).map(key => {\n        const nestedValidation = schema[key];\n        return nestedValidation.testAsync((value || {})[key]).catch(ex => {\n          ex.target = key;\n          causes.push(ex);\n        });\n      });\n      return Promise.all(nested).then(() => {\n        if (causes.length > 0) {\n          throw causes;\n        }\n\n        return true;\n      });\n    },\n  };\n}\n\nexport default v8n;\n"],"names":["Rule","name","fn","args","modifiers","this","pickFn","variant","testAux","length","const","modifier","shift","nextFn","perform","testAsyncAux","performAsync","value","Promise","resolve","_test","let","slice","ex","_check","it","_testAsync","reject","then","valid","catch","Modifier","ValidationError","rule","cause","target","super","remaining","Error","captureStackTrace","Context","chain","nextRuleModifiers","executeAsyncRules","rules","_applyRule","ruleFn","push","apply","_applyModifier","simple","async","_clone","test","every","testAll","err","forEach","check","testAsync","consideredEmpty","considerTrimmedEmptyString","trim","v8n","undefined","Proxy","proxyContext","proxylessContext","customRules","context","get","obj","prop","newContext","availableModifiers","availableRules","addRuleSet","ruleSet","targetContext","Object","keys","contextWithRuleApplied","contextWithAvailableRules","contextWithAllRules","defineProperty","extend","newRules","assign","clearCustomRules","not","result","some","split","item","all","map","Boolean","equal","expected","exact","number","allowInfinite","isFinite","integer","Number","isInteger","isIntegerPolyfill","numeric","isNaN","parseFloat","string","testType","boolean","null","array","object","instanceOf","instance","pattern","lowercase","uppercase","vowel","consonant","first","last","empty","min","max","minLength","maxLength","negative","positive","between","a","b","range","lessThan","n","lessThanOrEqual","greaterThan","greaterThanOrEqual","even","odd","includes","indexOf","schema","causes","key","nestedValidation","nested","testSchema","passesAnyOf","validations","validation","Array","isArray","Math","floor"],"mappings":"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"}